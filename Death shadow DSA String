#include <iostream> 
using namespace std; 

int findSum(string str) 
{ 

    string temp = ""; 


    int sum = 0; 


    for (char ch : str) { 

        if (isdigit(ch)) 
            temp += ch; 


        else { 

            sum += atoi(temp.c_str()); 
            temp = ""; 
        } 
    }
    return sum + atoi(temp.c_str()); 
} 


int main() 
{
    string str = "12abc20yz68"; 
    cout << findSum(str); 

    return 0; 
}

implementation of the approach 
#include <bits/stdc++.h> 
#include <time.h> 
using namespace std; 

// Function that returns true if it is possible 
// to rearrange the characters of the string 
// such that no two consecutive characters are same 
int isPossible(string str) 
{ 

    // To store the frequency of 
    // each of the character 
    unordered_map<char, int> freq; 

    // To store the maximum frequency so far 
    int max_freq = 0; 
    for (int j = 0; j < (str.length()); j++) { 
        freq[str[j]]++; 
        if (freq[str[j]] > max_freq) 
            max_freq = freq[str[j]]; 
    } 

    // If possible 
    if (max_freq <= (str.length() - max_freq + 1)) 
        return true; 
    return false; 
} 

// Driver code 
int main() 
{ 
    string str = "geeksforgeeks"; 

    if (isPossible(str)) 
        cout << "Yes"; 
    else
        cout << "No"; 

    return 0; 
}

import java.util.*;
 
class VRU{

static void printSubStr(String str, int low, int high)
{
    for (int i = low; i <= high; ++i)
    System.out.print(str.charAt(i));
}
static int longestPalSubstr(String str)
{

    int n = str.length();
 
    int maxLength = 1, start = 0;
 

    for (int i = 0; i < str.length(); i++) {
        for (int j = i; j < str.length(); j++) {
            int flag = 1;
 

            for (int k = 0; k < (j - i + 1) / 2; k++)
                if (str.charAt(i + k) != str.charAt(j - k))
                    flag = 0;
 

            if (flag!=0 && (j - i + 1) > maxLength) {
                start = i;
                maxLength = j - i + 1;
            }
        }
    }
 
    System.out.print("Longest palindrome subString is: ");
    printSubStr(str, start, start + maxLength - 1);
 
    return maxLength;
}
 
public static void main(String[] args)
{
    String str = "a,e,i,o,u";
    System.out.print("\nLength is: "
         + longestPalSubstr(str));
}
}
