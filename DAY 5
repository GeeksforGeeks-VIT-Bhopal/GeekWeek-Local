DSA 1
class AB:
    def createString(self, N, K):
        places_max = int(N / 2)
        if N % 2:
            places_max += 1
        places_list = (N - i for i in range(places_max))
        letters = list('A' * N)
        pairs = 0
        for places in places_list:
            for i in range(1, places):
                if pairs == K:
                    return ''.join(letters)
                letters[i - 1] = 'A' 
                letters[i] = 'B'  
                pairs += 1
            if pairs == K:
                return ''.join(letters)
            pairs -= 1  
        return ''
        _____________________________________________________________________________________________________________
      Dsa 2
      import java.util.ArrayList;
import java.util.List;
 
public class A0Paper {
    public static void main(String[] args) {
        int A[] ={0,0,0,0,15,0,3,1,0,3,1,0,0,0,15};
        String result = new A0Paper().canBuild(A);
        System.out.println(result);
    }
    public String canBuild (int[] A)
    {
        if (A[0] > 0 )
        return "Possible";
        List<Integer> paperList =new ArrayList<>();
        for (Integer paper:
             A) {
            paperList.add(paper);
        }
        int paperListSize = paperList.size();
        for (int i = paperListSize -1; i >=0 ; i--) {
            if (paperList.get(i) ==0) paperList.remove(i);
            else break;
        }
        paperListSize = paperList.size();
        for (int i = paperListSize -1; i >=0 ; i--) {
            if (paperList.get(i)==0) continue;
            else {
                if (paperList.size()==2)
                {
                    if (paperList.get(i)/2 >0) return "Possible";
                    else return "Impossible";
                }
                else {
                    paperList.set(i-1,paperList.get(i)/2 + paperList.get(i-1));
                    paperList.remove(paperList.get(i));
                    continue;
                }
            }
        }
        return "Impossible";
    }
}
__________________________________________________________________________________________________________________________________________
DSA 3
class ABBA:
    def canObtain(self, initial, target):
        if initial == target:
            return 'Possible'
        if len(initial) == len(target):
            return 'Impossible'
        if target[-1] == 'A':
            return self.canObtain(initial, target[:-1])
        if target[-1] == 'B':
            return self.canObtain(initial, target[:-1][::-1])
            _________________________________________________________________________________________________________________________________
            Encryption :
            def mapper(p):
    if p <= 12:
        p = p + 13
    else:
        p = p - 13
    return p


def caesar(x):
    up_key = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    low_key = "abcdefghijklmnopqrstuvwxyz"
    o = ""
    for e in x:
        if e.isupper():
            for r in range(0,26):
                if up_key[r] == e:
                    o = o + up_key[mapper(r)]
        elif e.islower():
            for r in range(0,26):
                if low_key[r] == e:
                    o = o + low_key[mapper(r)]
        else:
            o = o + e

    return o


a = str(input("INPUT: "))
b = a.split()
print("Encrypted password is: ",end="")
for u in b:
    print(caesar(u)," ",end="")
    _____________________________________________________________________________________________________________________________________________________________
    
            
