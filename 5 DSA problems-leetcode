#1
class Solution {
    public:
        int uniquePaths(int m, int n) {
            // m+n-2 C n-1 = (m+n-2)! / (n-1)! (m-1)! 
            long long ans = 1;
            for (int i = n; i < (m + n - 1); i++) {
                ans *= i;
                ans /= (i - n + 1);
            }
            return (int)ans;
        }
};

#2
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int ret=0;
        int temp=Integer.MAX_VALUE;
        Arrays.sort(num);
        for(int i=0;i<num.length-2;i++){
            int j=i+1;
            int k=num.length-1;
            while(j<k){
                int sum=num[i]+num[j]+num[k];
                if(Math.abs(sum-target)<temp){
                    ret=sum;
                    temp=Math.abs(sum-target);
                }
                if(sum>target) k--;
                else j++;
            }
        }
        return ret;
    }
}

#3
class Solution {
    public:
        int maxArea(vector<int> &height) {
            int end = height.size() - 1, start = 0;
            int maxVol = 0;

            while(start < end)
            {
                maxVol = max(maxVol, (end - start) * min(height[start], height[end]));

                if (height[start] < height[end]) {
                    start++;
                } else {
                    end--;
                }
            }
            return maxVol;
        }
};

#4
class Solution {
public:
    vector<vector<int> > generateMatrix(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(n<=0) return vector<vector<int>>();
        vector<vector<int>> result(n,vector<int>(n));
        int xBeg=0,xEnd=n-1;
        int yBeg=0,yEnd=n-1;
        int cur=1;
        while(true){
            for(int i=yBeg;i<=yEnd;i++) result[xBeg][i]=cur++;
            if(++xBeg>xEnd) break;
            for(int i=xBeg;i<=xEnd;i++) result[i][yEnd]=cur++;
            if(--yEnd<yBeg) break;
            for(int i=yEnd;i>=yBeg;i--) result[xEnd][i]=cur++;
            if(--xEnd<xBeg) break;
            for(int i=xEnd;i>=xBeg;i--) result[i][yBeg]=cur++;
            if(++yBeg>yEnd) break;
        }
        return result;  
    }
};

#5
class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(grid.size()==0||grid[0].size()==0) return 0;
        int f[grid.size()][grid[0].size()];
        f[0][0]=grid[0][0];
        for(int i=1;i<grid.size();i++) f[i][0]=f[i-1][0]+grid[i][0];
        for(int j=1;j<grid[0].size();j++) f[0][j]=f[0][j-1]+grid[0][j];
        for(int i=1;i<grid.size();i++)
            for(int j=1;j<grid[0].size();j++)
                f[i][j]=min(f[i-1][j],f[i][j-1])+grid[i][j];
        return f[grid.size()-1][grid[0].size()-1];
    }
};
