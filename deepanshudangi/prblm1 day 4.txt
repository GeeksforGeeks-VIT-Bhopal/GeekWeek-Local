longest substring without repeating characters ( code done in java )
 
-
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        Queue<Character> queue = new LinkedList<>();
        
        int n = s.length();
        int len = 0;
        for (int i = 0; i < n; i++) { // O(n)
            char c = s.charAt(i);
            while (set.contains(c)) {
                char head = queue.poll(); // O(1)
                set.remove(head); // O(1)
            }
            set.add(c); // O(1)
            queue.offer(c); // O(1)
            len = Math.max(len, queue.size());
        }
        return len;
    }
}
 
 
 
Longest palindromic substring ( code in python 3)
-
 
class Solution:
    def longestPalindrome(self, s: str) -> str:
        for x in reversed(range(1,len(s)+1)):
            for y in range((len(s)+1)-x):
                g=s[y:x+y]
                if g[0]!=g[-1]:pass
                elif g==g[::-1]:return g
 
 
Generate parenthesis ( pyton 3)
-
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def helper(s, m, d):
            if len(s) == 2*n:
                res.append(s) 
                return 
            
            if d > m:
                return 
            if m == d:
                helper(s+'(', m+1, d)
            elif m == n:
                helper(s+')', m, d+1)
            else:
                helper(s+'(', m+1, d) 
                helper(s+')', m, d+1) 
        
        helper('', 0, 0)
        return res
 
