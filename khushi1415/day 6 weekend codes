## CODES
// Returns common element in all rows of mat[M][N]. If there is no
// common element, then -1 is returned
int findCommonEleInRows(int **mat, int M, int N)
{
    if (M == 1) {
        int result = INT_MAX;
        for (int i = 0; i < N; i++) {
            if (mat[0][i] < result) {
                result = mat[0][i];
            }
        }
        return result;
    }

    unordered_map<int, int> mp;


    for (int i = 0; i < M - 1; i++)
    {
        unordered_map<int, int> temp;
        for (int j = 0; j < N; j++)
        {
            if (temp[mat[i][j]] == 0) {
                mp[mat[i][j]]++;
                temp[mat[i][j]] = 1;
            }
        }
    }

    int result = INT_MAX;
    for (int i = 0; i < N; i++) {
        if (mp[mat[M - 1][i]] == M -…

  Time Complexity : O(N*M)
  Space Complexity : O(N*M)

  where N and M are length of string a and b respectively
*/

#include <string>
#include <algorithm>

// Function for finding two numbers represented as strings
string add(string a, string b)
{
    // Checking whether string a is larger than string b
    if (a.length() > b.length())
    {
        swap(a, b);
    }

    // Initializing result string
    string answer = "";

    // Calculating length of the two strings
    int l1 = a.length(), l2 = b.length();

    // Reversing the two strings
    reverse(a.begin(), a.end());
    reverse(b.begin(), b.end());

    // Using elementary addition to add digit by digit
    int carry = 0;
    for (int i = 0; i < l1; i++)
    {
        // Computing sum of  dig…
### NEXT CODE
int findSum(int *arr, int l)
{
	int i , sum = 0;
	for( i = 0 ; i < l ; i++)
      	{
      		if( ( arr[i] % 2 == 0) || ( arr[i] % 3 == 0 ) )
	   	{
	   		sum = sum + arr[i];
	   	}
      	}
	return sum;
}
### NEXT CODE
void update(int tmp, int &len, int &cnt)
{
    if (tmp > len)
    {
        len = tmp;
        cnt = 1;
    }
    else if (tmp == len)
    {
        cnt++;
    }
}

void solve(string s)
{
    int f[s.size() + 1], second[s.size() + 1], top;

    int n = s.size();
    int len = 0, cnt = 1;
    if (n == 0)
    {
        puts("0 1");
        return;
    }

    top = 0;
    for (int i = 0; i < n; ++i)
    {
        if (s[i] == '(')
        {
            second[top++] = i;
            f[i] = 0;
        }
        else
        {
            if (top == 0)
            {
                f[i] = 0;
            }
            else
            {
                int k = second[--top], tmp = 0;
                if (k > 0)
                {
                    tmp = i - k + 1 + f[k - 1];
                }
                else
                {
                    tmp = i - k + 1;
                }

                f[i] = tmp;

                update(tmp, len, cnt);
            }
        }
    }

    cout << len << " " << cnt;
}
