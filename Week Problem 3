#include <algorithm>

int convertToInt(string binStr) {
    // Length of given binary string.
    int len = binStr.length();

    int num = 0;
    // Traversing from rightmost character (least significant bit) to leftmost character (most significant bit)
    for(int i = len-1; i >= 0; i--) {
        if(binStr[i] == '1') {
            // Note-: (1 << i) = 2^i.
            num += (1 << (len-i-1));
        }
    }
    return num;
}

string convertToBin(int num) {
    string binStr;

    // Corner Case.
    if(num == 0) {
        return "0";
    }

    // Repeatedly divide 'num' by 2 to find binary representation of num.
    while(num > 0) {
        if(num & 1) {
            binStr += '1';
        }
        else {
            binStr += '0';
        }
        num = num / 2;
    }

    // Reverse 'binStr'.
    reverse(binStr.begin(), binStr.end());

    return binStr;
}

string findMissingNumber(vector<string> &binaryNums, int n)
{
   vector<int> nums(n);
    // Convert all binary strings to integers.
    for(int i = 0; i < n; i++) {
        nums[i] = convertToInt(binaryNums[i]);
    }
    // Sort 'nums' in ascending order. 
    sort(nums.begin(), nums.end());
    int missingNum = n;

    for(int i = 0; i < n; i++) {
        if(nums[i] != i) {
            missingNum = i;
            break;
        }
    }

    // Convert missingNum in binary and return it.
    return convertToBin(missingNum);
}
